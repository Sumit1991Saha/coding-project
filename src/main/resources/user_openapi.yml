openapi: 3.0.0
servers:
  - description: App URL
    url: https://localhost:8084/harborcodingassignment/
info:
  description: |
    Harbor Calendar
  version: "1.0.0"
  title: Harbor Calendar Api's
  termsOfService: ''
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Harbor Calendar Api's
    description:
    externalDocs:
      description: Find out more
      url: ''

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'

paths:
  /users:
    get:
      tags:
        - user
      summary: Returns a list of all the user's details.
      description: |
        Returns list of all the users. <br>
      operationId: getUsers
      responses:
        '200':
          description: Fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found

    post:
      tags:
        - user
      summary: Create a new user
      description: Creates a new user for given payload and returns the id.
      operationId: createUser
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

          links:
            CreatedUserId:
              operationId: getUser
              parameters:
                userId: '$response.body#/id'
              description:
                The `id` value returned in the response can be used as `user-id` parameter in `GET /users/{user-id}`
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '409':
          description: Conflict. user with given details already exists.
      requestBody:
        $ref: '#/components/requestBodies/User'

  '/users/{user-id}':
    parameters:
      - $ref: '#/components/parameters/userId'

    get:
      tags:
        - user
      summary: Get a JSON representation of user for the given user id.
      description: Get a JSON representation of user for the given user id.
      operationId: getUser
      responses:
        '200':
          description: Fetched Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: user with given id Not Found

    put:
      tags:
        - user
      summary: Update existing user using JSON representation.
      description: Update existing user using JSON representation.
      operationId: updateUser
      responses:
        '200':
          description: Updated Successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: user with given id Not Found
      requestBody:
        $ref: '#/components/requestBodies/User'

    delete:
      tags:
        - user
      summary: Delete existing user using user id.
      description: Delete existing user using user id.
      operationId: deleteUser
      responses:
        '204':
          description: Deleted Successfully
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: User with given id Not Found

components:
  schemas:

    Users:
      type: array
      items:
        $ref: '#/components/schemas/User'

    User:
      description: "User definition"
      type: object
      properties:
        id:
          description: User does not need to provide this. Will be generated by system and returned in response.
          type: integer
          format: int64
          readOnly: true
        firstName:
          description: first name of the user.
          type: string
          minLength: 1
        lastName:
          description: last name of the user.
          type: string
          minLength: 1
      required:
        - firstName
        - lastName
      example:
        firstName: "Sumit"
        lastName: "Saha"

  parameters:
    userId:
      in: path
      name: user-id
      description: ID for user id which needs to be operated on.
      required: true
      schema:
        type: integer
        format: int64
        example: 1

  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

